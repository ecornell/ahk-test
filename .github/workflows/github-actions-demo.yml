name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ

on: [push]

jobs:
  Explore-GitHub-Actions:
    runs-on: windows-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."


      - name: Install AutoHotkey v2
        shell: pwsh
        run: |
          $cwd = (Get-Item .).FullName;
          
          Invoke-WebRequest "https://www.autohotkey.com/download/ahk-v2.zip" -OutFile "$cwd\ahk-v2.zip";
          Expand-Archive -Path "$cwd\ahk-v2.zip" -DestinationPath "$cwd\_autohotkey\" -Force;
          Remove-Item -Path "$cwd\ahk-v2.zip" -Force

          Invoke-WebRequest "https://www.autohotkey.com/mpress/mpress.219.zip" -OutFile "$cwd\mpress.zip";
          Expand-Archive -Path "$cwd\mpress.zip" -DestinationPath "$cwd\_autohotkey\Compiler" -Force;
          Remove-Item -Path "$cwd\mpress.zip" -Force

          Invoke-WebRequest "https://github.com/AutoHotkey/Ahk2Exe/releases/download/Ahk2Exe1.1.36.02e1/Ahk2Exe1.1.36.02e.zip" -OutFile "$cwd\Ahk2Exe.zip";
          Expand-Archive -Path "$cwd\Ahk2Exe.zip" -DestinationPath "$cwd\_autohotkey\Compiler" -Force;
          Remove-Item -Path "$cwd\Ahk2Exe.zip" -Force
          
          Write-Output ("$cwd\_autohotkey\;" + "$cwd\_autohotkey\Compiler") | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: Run Ahk2Exe
        shell: pwsh
        run: |
          $command = '_autohotkey\Ahk2Exe.exe /silent verbose '
          if('${{vars.in}}' -ne ''){
            $command += '/in "${{vars.in}}" '
          }
          if('${{vars.out}}' -ne ''){
            $command += '/out "${{vars.out}}" '
          }
          if('${{vars.icon}}' -ne ''){
            $command += '/icon "${{vars.icon}}" '
          }
          if('${{vars.base}}' -ne ''){
            $command += '/base "$Env:BaseFile" '
          }
          $command += "| Write-Output"
          Invoke-Expression $command



      - run: echo "üçè This job's status is ${{ job.status }}."